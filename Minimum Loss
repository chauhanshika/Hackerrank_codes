#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct {
    long price;
    int index;
} PriceInfo;

int cmpfunc(const void* a, const void* b) {
    long diff = ((PriceInfo*)a)->price - ((PriceInfo*)b)->price;
    return (diff > 0) - (diff < 0); // return -1, 0, or 1
}

int minimumLoss(int price_count, long* price) {
    PriceInfo* arr = (PriceInfo*)malloc(price_count * sizeof(PriceInfo));

    for (int i = 0; i < price_count; i++) {
        arr[i].price = price[i];
        arr[i].index = i;
    }

    qsort(arr, price_count, sizeof(PriceInfo), cmpfunc);

    long minLoss = LONG_MAX;

    for (int i = 1; i < price_count; i++) {
        if (arr[i].index < arr[i-1].index) { // ensure buy comes before sell
            long loss = arr[i].price - arr[i-1].price;
            if (loss > 0 && loss < minLoss) {
                minLoss = loss;
            }
        }
    }

    free(arr);
    return (int)minLoss;
}

int main() {
    int n;
    scanf("%d", &n);
    long* prices = (long*)malloc(n * sizeof(long));
    for (int i = 0; i < n; i++) {
        scanf("%ld", &prices[i]);
    }
    printf("%d\n", minimumLoss(n, prices));
    free(prices);
    return 0;
}
